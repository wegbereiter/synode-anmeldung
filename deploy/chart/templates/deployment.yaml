{{- $chartName := include "chart.name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ include "chart.fullname" . }}
    namespace: {{ .Values.namespace }}
    labels:
        app.kubernetes.io/name: {{ include "chart.name" . }}
        helm.sh/chart: {{ include "chart.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
    replicas: {{ .Values.replicaCount }}
    selector:
        matchLabels:
            app.kubernetes.io/name: {{ include "chart.name" . }}
            app.kubernetes.io/instance: {{ .Release.Name }}
    template:
        metadata:
            labels:
                app.kubernetes.io/name: {{ include "chart.name" . }}
                app.kubernetes.io/instance: {{ .Release.Name }}
            annotations:
                checksum/config: {{ .Files.Get (print "config/" (include "chart.name" .) ".yaml") | sha256sum }}
        spec:
            nodeName: {{ .Values.node }}
            restartPolicy: Always
            imagePullSecrets:
                - name: docker-hub
            containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                    - name: PORT
                      value: "80"
                    {{- range $key, $value := .Values.settings }}
                    - name: {{ $value }}
                      valueFrom:
                          configMapKeyRef:
                              name: {{ $chartName }}
                              key: {{ $key }}
                    {{- end }}
                    - name: GOOGLE_KEY
                      valueFrom:
                          secretKeyRef:
                            key: key
                            name: google-docs
                            optional: false
                  ports:
                      - name: http
                        containerPort: 80
                        protocol: TCP
                  livenessProbe:
                      httpGet:
                          path: /
                          port: http
                      failureThreshold: 3
                      initialDelaySeconds: 10
                      periodSeconds: 2
                      successThreshold: 1
                      timeoutSeconds: 2
                  readinessProbe:
                      httpGet:
                          path: /
                          port: http
                      failureThreshold: 3
                      initialDelaySeconds: 10
                      periodSeconds: 2
                      successThreshold: 2
                      timeoutSeconds: 2
